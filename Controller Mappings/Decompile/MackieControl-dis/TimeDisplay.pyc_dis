# File: T (Python 2.5)

from MackieControlComponent import *

class TimeDisplay(MackieControlComponent):
    """Represents the Mackie Controls Time-Display, plus the two LED's that show the"""
    
    def __init__(self, main_script):
        MackieControlComponent.__init__(self, main_script)
        self._TimeDisplay__main_script = main_script
        self._TimeDisplay__show_beat_time = False
        self._TimeDisplay__smpt_format = Live.Song.TimeFormat.smpte_25
        self._TimeDisplay__last_send_time = []
        self.show_beats()

    
    def destroy(self):
        self.clear_display()
        MackieControlComponent.destroy(self)

    
    def show_beats(self):
        self._TimeDisplay__show_beat_time = True
        self.send_midi((NOTE_ON_STATUS, SELECT_BEATS_NOTE, BUTTON_STATE_ON))
        self.send_midi((NOTE_ON_STATUS, SELECT_SMPTE_NOTE, BUTTON_STATE_OFF))

    
    def show_smpte(self, smpte_mode):
        self._TimeDisplay__show_beat_time = False
        self._TimeDisplay__smpt_format = smpte_mode
        self.send_midi((NOTE_ON_STATUS, SELECT_BEATS_NOTE, BUTTON_STATE_OFF))
        self.send_midi((NOTE_ON_STATUS, SELECT_SMPTE_NOTE, BUTTON_STATE_ON))

    
    def toggle_mode(self):
        if self._TimeDisplay__show_beat_time:
            self.show_smpte(self._TimeDisplay__smpt_format)
        else:
            self.show_beats()

    
    def clear_display(self):
        continue
        time_string = [ ' ' for i in range(10) ]
        self._TimeDisplay__send_time_string(time_string, show_points = False)
        self.send_midi((NOTE_ON_STATUS, SELECT_BEATS_NOTE, BUTTON_STATE_OFF))
        self.send_midi((NOTE_ON_STATUS, SELECT_SMPTE_NOTE, BUTTON_STATE_OFF))

    
    def refresh_state(self):
        self.show_beats()
        self._TimeDisplay__last_send_time = []

    
    def on_update_display_timer(self):
        if self._TimeDisplay__show_beat_time:
            time_string = str(self.song().get_current_beats_song_time())
        else:
            time_string = str(self.song().get_current_smpte_song_time(self._TimeDisplay__smpt_format))
        continue
        time_string = _[1]
        if self._TimeDisplay__last_send_time != time_string:
            self._TimeDisplay__last_send_time = time_string
            self._TimeDisplay__send_time_string(time_string, show_points = True)
        

    
    def _TimeDisplay__send_time_string(self, time_string, show_points):
        if not len(time_string) >= 10:
            raise AssertionError
        for c in range(0, 10):
            char = time_string[9 - c].upper()
            char_code = g7_seg_led_conv_table[char]
            if show_points and c in (3, 5, 7):
                char_code += 64
            
            self.send_midi((176, 64 + c, char_code))
        


